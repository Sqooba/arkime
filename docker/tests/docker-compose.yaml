version: "3"

# How to use to run tests
# $ docker compose up -d
# $ docker compose exec arkime /bin/bash
# $ ./easybutton-build.sh --nonode
# $ mv tests/config.test.ini tests/config.test.ini.orig
# $ mv tests/config.test.ini.docker tests/config.test.ini
# $ make check # takes a couple of minutes
# $ npm run viewer:test # (optional, http://localhost:8123)

services:
  arkime:
    container_name: arkime
    build:
      dockerfile: ./docker/tests/Dockerfile
      context: ../../.
    volumes:
      - ../../capture/parsers:/src/capture/parsers
      - ../../tests:/src/tests
      - ./config.test.ini:/src/tests/config.test.ini
    command: sleep 300000
    environment:
      ELASTICSEARCH: "http://elasticsearch:9200"
    networks:
      - elastic
    ports:
      - 8123:8123

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.2
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=arkime-es
      - cluster.initial_master_nodes=elasticsearch
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic
    healthcheck:
      test: "curl -fs http://localhost:9200/_cluster/health?wait_for_status=yellow"
      interval: 30s
      timeout: 30s
      retries: 3

  kibana:
    image: 'docker.elastic.co/kibana/kibana:7.11.2'
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    ports:
      - '5601:5601'
    networks:
      - elastic

volumes:
  data01:
    driver: local

networks:
  elastic:
    driver: bridge
